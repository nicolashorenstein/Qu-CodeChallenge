@inject  IChallengeService ChallengeService
@inject IJSRuntime jsRuntime
@layout BlankLayout
@page "/"
@using Qu_CodeChallenge.DOMAIN.Responses.Matrix
@using Qu_CodeChallenge.Interfaces.Challenge


@if (showLoading)
{
    <div class="container-fluid">
        <div class="text-center">
            @loadingMessage
            <br/>
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading data...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-6">
            <h1>Qu Code Challenge</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <button class="btn btn-primary" @onclick="ResolveChallenge">Resolve</button>
        </div>
    </div>
    @if (showResults)
    {
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <ul class="list-group">
                    @for (var i = 0; i < modelResult.Words.Count; i++)
                    {
                        <li class="list-group-item">@(i+1)° -  @modelResult.Words.ElementAt(i).Key: <b>@modelResult.Words.ElementAt(i).Value</b> </li>
                    }
                    </ul>
                </div>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <div class="row">
                <table class="table table-bordered">
                    <tbody>
                    @for (int i = 0; i < model.Matrix.Count; i++)
                    {
                        var arrayOfItems = model.Matrix[i].ToArray();
                        <tr class="custom-width">
                            @for (int j = 0; j < arrayOfItems.Length; j++)
                            {
                                if (char.IsUpper(arrayOfItems[j]))
                                {
                                    <td class="custom-width" style="background-color: #20c997">
                                        <b class="red-text">@arrayOfItems[j]</b>
                                    </td>
                                }
                                else
                                {
                                    <td class="custom-width">@arrayOfItems[j]</td>
                                }
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
<PageTitle>Qu Code Challenge</PageTitle>

@code{
    private bool showLoading = true;
    private bool showResults = false;
    private string loadingMessage = "";
    private MatrixResult model;
    private WordFinderResult modelResult;

    protected override async Task OnInitializedAsync()
    {
        loadingMessage = "Getting Code Challenge...";
        model = new MatrixResult();
        modelResult = new WordFinderResult();
        await StartChallenge();
    }

    private async Task StartChallenge()
    {
        showLoading = true;
        var apiResponse = await ChallengeService.StartChallenge();
        if (apiResponse.Ok)
        {
            showLoading = false;
            model = apiResponse;
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("showError", apiResponse.Error);
        }
    }

    private async Task ResolveChallenge()
    {
        loadingMessage = "Resolving challenge";
        showLoading = true;

        var apiResponse = await ChallengeService.ResolveChallenge(model.Matrix);
        if (apiResponse.Ok)
        {
            showLoading = false;
            showResults = true;
            modelResult = apiResponse;
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("showError", apiResponse.Error);
        }
    }

}

